dremio:
  auth:
    enabled: true
    username: "admin"
    password: "super_secret_password"
    firstName: "Josh"
    lastName: "Yorko"
    email: "email@example.com"

  masterCoordinator:
    resources:
      requests:
        memory: "48Gi"
        cpu: "4"
      limits:
        memory: "60Gi"
        cpu: "6"
    persistence:
      storageClass: "gp2-expandable"
      size: 50Gi
    extraStartParams: >-
      -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
      -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
    extraEnvVars:
      - name: DREMIO_TLS_KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dremio-keystore-password
            key: password

  coordinator:
    resources:
      requests:
        memory: "24Gi"
        cpu: "4"
      limits:
        memory: "48Gi"
        cpu: "6"
    persistence:
      storageClass: "gp2-expandable"
      size: 50Gi
    extraStartParams: >-
      -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
      -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
    extraEnvVars:
      - name: DREMIO_TLS_KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dremio-keystore-password
            key: password
    autoscaling:
      hpa:
        enabled: true
        minReplicas: 1
        maxReplicas: 3
        targetCPU: 80
        targetMemory: 80

  executor:
    common:
      resources:
        requests:
          memory: "160Gi"
          cpu: "10"
        limits:
          memory: "300Gi"
          cpu: "18"
      persistence:
        storageClass: "gp2-expandable"
        size: 200Gi
      extraStartParams: >-
        -Xmx160g
        -XX:MaxDirectMemorySize=40g
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=32M
        -XX:+UseGCOverheadLimit
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/opt/dremio/data/heap-dump.hprof
        -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
        -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
      extraEnvVars:
        - name: DREMIO_TLS_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dremio-keystore-password
              key: password
      autoscaling:
        hpa:
          enabled: true
          minReplicas: 1
          maxReplicas: 5
          targetCPU: 80
          targetMemory: 80

  defaultInitContainers:
    wait:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    generateConf:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    initCerts:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    copyDefaultConf:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    upgradeKeystore:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"

  service:
    type: LoadBalancer

  extraVolumes:
    - name: dremio-tls
      secret:
        secretName: dremio-tls-secret

  extraVolumeMounts:
    - name: dremio-tls
      mountPath: /opt/dremio/tls
      readOnly: true

minio:
  ## @param minio.enabled Enable/disable MinIO&reg; chart installation
  ## to be used as an objstore for Dremio
  ##
  enabled: true
  ## @param minio.containerPorts.api MinIO&reg; container port to open for MinIO&reg; API
  ##
  containerPorts:
    api: 9000
  ## MinIO&reg; authentication parameters
  ##
  auth:
    ## @param minio.auth.rootUser MinIO&reg; root username
    ##
    rootUser: admin
    ## @param minio.auth.rootPassword Password for MinIO&reg; root user
    ##
    rootPassword: "password123"  # Change this to a secure password
    ## @param minio.auth.existingSecret Name of an existing secret containing the MinIO&reg; credentials
    ##
    existingSecret: ""
  ## @param minio.defaultBuckets Comma, semi-colon or space separated list of MinIO&reg; buckets to create
  ##
  defaultBuckets: "dremio"
  ## @param minio.provisioning.enabled Enable/disable MinIO&reg; provisioning job
  ## @param minio.provisioning.extraCommands Extra commands to run on MinIO&reg; provisioning job
  ##
  provisioning:
    enabled: true
    # We need to allow downloads in order for the UI to work
    extraCommands: ["mc anonymous set download provisioning/dremio"]
  ## @param minio.tls.enabled Enable/disable MinIO&reg; TLS support
  ## @param minio.tls.autoGenerated Autogenerate TLS certificates
  ##
  tls:
    enabled: true
    autoGenerated: true
  ## @param minio.service.type MinIO&reg; service type
  ## @param minio.service.loadBalancerIP MinIO&reg; service LoadBalancer IP
  ## @param minio.service.ports.api MinIO&reg; service port
  ##
  service:
    type: LoadBalancer
    loadBalancerIP: ""
    ports:
      api: 9000

  ## MinIO&reg; persistence settings
  persistence:
    enabled: true
    size: 50Gi
  ## MinIO&reg; resource requests and limits
  resources:
    requests:
      memory: "6Gi"
      cpu: "2"
    limits:
      memory: "12Gi"
      cpu: "4"

zookeeper:
  enabled: true
  replicaCount: 3
  resources:
    requests:
      cpu: "1"
      memory: "3Gi"
    limits:
      cpu: "2"
      memory: "6Gi"
  persistence:
    storageClass: "gp2-expandable"
    size: 20Gi
