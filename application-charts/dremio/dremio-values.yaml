dremio:
  auth:
    enabled: true
    username: admin
    password: "Pa22word"
    firstName: Josh
    lastName: Yorko
    email: "email@example.com"

  masterCoordinator:
    persistence:
      storageClass: "longhorn"
      size: 8Gi
    extraStartParams: >-
      -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
      -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
    extraEnvVars:
      - name: DREMIO_TLS_KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dremio-keystore-password
            key: password

  coordinator:
    persistence:
      storageClass: "longhorn"
      size: 8Gi
    extraStartParams: >-
      -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
      -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
    extraEnvVars:
      - name: DREMIO_TLS_KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dremio-keystore-password
            key: password

  executor:
    persistence:
      storageClass: "longhorn"
      size: 8Gi
    extraStartParams: >-
      -XX:+UseG1GC
      -XX:+UseGCOverheadLimit
      -XX:+ExplicitGCInvokesConcurrent
      -XX:+HeapDumpOnOutOfMemoryError
      -XX:HeapDumpPath=/opt/dremio/data/heap-dump.hprof
      -Ddremio.tls.keyStore=/opt/dremio/tls/dremio.jks
      -Ddremio.tls.keyStorePassword=${DREMIO_TLS_KEYSTORE_PASSWORD}
    extraEnvVars:
      - name: DREMIO_TLS_KEYSTORE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dremio-keystore-password
            key: password

  defaultInitContainers:
    wait:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    generateConf:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    initCerts:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    copyDefaultConf:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"
    upgradeKeystore:
      resources:
        requests:
          memory: "500Mi"
          cpu: "0.5"
        limits:
          memory: "1Gi"
          cpu: "1"

  postInstall:
    enabled: true
    job:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: dremio-post-install
      spec:
        template:
          spec:
            containers:
              - name: dremio-post-install
                image: busybox
                command: ["/bin/sh", "-c"]
                args:
                  - |
                    sleep 60s
                    response=$(curl -s -X POST "$DREMIO_ENDPOINT/apiv2/login" \
                      --header "Content-Type: application/json" \
                      --data-raw "{
                      \"userName\": \"$DREMIO_USERNAME\",
                      \"password\": \"$DREMIO_PASSWORD\"
                      }")
                    echo $response
                    token=$(echo "$response" | grep -oP '"token":\s*"\K[^"]+')
                    echo $token

                    response=$(curl -X POST "$DREMIO_ENDPOINT/api/v3/catalog" \
                      --header "Authorization: Bearer $token" \
                      --header "Content-Type: application/json" \
                      --data-raw "{
                          \"entityType\": \"source\",
                          \"config\": {
                              \"nessieEndpoint\": \"http://nessie:19120/api/v2\",
                              \"nessieAuthType\": \"NONE\",
                              \"asyncEnabled\": true,
                              \"isCachingEnabled\": true,
                              \"maxCacheSpacePct\": 100,
                              \"credentialType\": \"ACCESS_KEY\",
                              \"awsAccessKey\": \"$MINIO_ACCESS_KEY\",
                              \"awsAccessSecret\": \"$MINIO_SECRET_KEY\",
                              \"awsRootPath\": \"/warehouse\",
                              \"propertyList\": [
                                  {
                                      \"name\": \"fs.s3a.path.style.access\",
                                      \"value\": \"true\"
                                  },
                                  {
                                      \"name\": \"fs.s3a.endpoint\",
                                      \"value\": \"dremio-minio:9000\"
                                  },
                                  {
                                      \"name\": \"dremio.s3.compat\",
                                      \"value\": \"true\"
                                  }
                              ],
                              \"secure\": false
                          },
                          \"name\": \"$NESSIE_CATALOG_NAME\",
                          \"type\": \"NESSIE\"
                      }")
                    echo $response
                envFrom:
                  - configMapRef:
                      name: dremio-env
            restartPolicy: OnFailure

  extraEnvVars:
    - name: DREMIO_ENDPOINT
      value: "http://dremio:9047"
    - name: DREMIO_USERNAME
      value: "admin"
    - name: DREMIO_PASSWORD
      value: "Pa22word"
    - name: MINIO_ACCESS_KEY
      value: "minio-admin"
    - name: MINIO_SECRET_KEY
      value: "Pa22word"
    - name: NESSIE_CATALOG_NAME
      value: "nessie"

  service:
    type: LoadBalancer

  extraVolumes:
    - name: dremio-tls
      secret:
        secretName: dremio-tls-secret

  extraVolumeMounts:
    - name: dremio-tls
      mountPath: /opt/dremio/tls
      readOnly: true

minio:
  enabled: true
  auth:
    rootUser: "minio-admin"
    rootPassword: "Pa22word"  # Change this to a secure password
  defaultBuckets: "dremio,warehouse"
  provisioning:
    enabled: true
    extraCommands: 
      - "mc anonymous set download provisioning/dremio"
      - "mc anonymous set download provisioning/warehouse"
      #- "mc mb provisioning/warehouse"  # Create the warehouse bucket
  tls:
    enabled: false
    autoGenerated: false
  service:
    type: LoadBalancer
    loadBalancerIP: ""
    ports:
      api: 9000
  resources:
    requests:
      memory: "6Gi"
      cpu: "2"
    limits:
      memory: "12Gi"
      cpu: "4"
  persistence:
    storageClass: "longhorn"
    size: 100Gi

zookeeper:
  enabled: true
  replicaCount: 1
  resources:
    requests:
      cpu: "1"
      memory: "3Gi"
    limits:
      cpu: "2"
      memory: "6Gi"
  persistence:
    storageClass: "longhorn"
    size: 15Gi